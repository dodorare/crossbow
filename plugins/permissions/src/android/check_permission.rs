use super::*;
use crate::{error::*, types::android::*};
use jni::signature as Signature;

/// Check whether permission was granted or not
pub fn check_permission(permission: AndroidPermission) -> Result<bool> {
    let (ctx, vm) = create_java_vm()?;
    let java_env = vm.attach_current_thread()?;

    let string_permission = get_permission_from_manifest(permission, &java_env)?;

    let (permission_granted, permission_denied) = permission_status(&java_env)?;

    // Determine whether you have been granted a particular permission.
    let class_context = java_env.find_class(ANDROID_CONTEXT)?;
    let method_check_self_permission = java_env.get_method_id(
        class_context,
        CHECK_SELF_PERMISSION_METHOD,
        CHECK_SELF_PERMISSION_SIGNATURE,
    )?;

    let ret = java_env.call_method_unchecked(
        ctx.context().cast(),
        method_check_self_permission,
        Signature::JavaType::Primitive(Signature::Primitive::Int),
        &[string_permission],
    )?;

    if ret.i()? == permission_denied.i()? {
        invoke_request_permission_method(permission, &java_env)?;
    } else {
        show_text_from_main_activity_class(permission)?;
    }

    Ok(true)
}

#[no_mangle]
pub extern "system" fn Java_com_example_MainActivity_dispatchKeyEvent(
    env: &Env,
    _this: jobject,
    key_event: Argument<KeyEvent>,
) -> jboolean {
    let key_event = unsafe { key_event.with_unchecked(env) }; // Unsafe boilerplate not yet autogenerated.

    // Err = Java exception was thrown.
    // Ok(None) = Java object is null.
    // Ok(Some(...)) = Real java object!
    if let Some(key_event) = key_event {
        let is_enter = if let Ok(r) = key_event.getKeyCode() {
            r == KeyEvent::KEYCODE_ENTER
        } else {
            false
        };
        let is_down = if let Ok(r) = key_event.getAction() {
            r == KeyEvent::ACTION_DOWN
        } else {
            false
        };
        if is_enter && is_down {
            println!("ENTER pressed"); // Not that you can see this...
        }
    }

    JNI_TRUE // JNI boilerplate not yet autogenerated
}
